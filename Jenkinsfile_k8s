pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    environment {
            DOCKERHUB_CREDENTIALS = 'docker'  // DockerHub 자격 증명 ID
            DOCKER_IMAGE_NAME = 'kohyunchoel/todaynan_backend'
            GITHUB_CREDENTIALS = 'github'
            GITHUB_URL = 'https://github.com/KoRakunnn/todaynan_server'
            APPLICATION_PROPERTIES = 'application_properties'
            INSTANCE_SSH_CREDENTIALS_1 = 'instance1'
            INSTANCE_IP_ADDRESS_1 = 'instance1_ip'
            INSTANCE_IP_ADDRESS_2 = 'instance2_ip'

            OCI_CLI_CONFIG_FILE = '/var/jenkins_home/.oci/config'
            KUBECONFIG = '/var/jenkins_home/.kube/config'
            PATH = "${PATH}:/var/jenkins_home/.local/bin"
        }
    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', credentialsId: "$GITHUB_CREDENTIALS", url: "$GITHUB_URL"
            }
        }
        stage('Apply application properties') {
            steps {
                withCredentials([file(credentialsId: "$APPLICATION_PROPERTIES", variable: 'SECRET_FILE')]) {
                    sh 'cp $SECRET_FILE ./src/main/resources/application.properties'
                }
            }
        }

       stage('Build') {
           steps {
               sh "./gradlew clean build -x test"
           }
       }


        stage('Docker Build') {
            steps {
                 dir("/var/jenkins_home/workspace/todaynan") {
                     sh '''
                         echo 'Building Docker image...'
                         docker build -t $DOCKER_IMAGE_NAME:latest .
                     '''
                 }
            }
        }

        stage('Docker Hub Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh '''
                        echo 'Logging into DockerHub...'
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker push $DOCKER_IMAGE_NAME:latest
                    '''
                }
            }
        }

        stage('Deploy to K8s cluster') {
            steps {
                    // Deployments를 적용하기 전에 모든 Pod를 삭제하여 최신 이미지를 가져오도록 설정

                                       sh 'kubectl delete pod -l app=spring-app'

                                        // Deployment 적용
                                        sh 'kubectl apply -f /var/jenkins_home/deployment.yaml'

                                        // Deployment 상태 확인
                                        sh 'kubectl rollout status deployment/spring-app'
                }

        }
    }
}
